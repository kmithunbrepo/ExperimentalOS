[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=9;
alias userSP R1;
userSP=SP;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13]=SP;
SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512-1;
alias pid R2;
pid=[SYSTEM_STATUS_TABLE+1];
alias fileName R3;
fileName=[([PTBR+2*(userSP-4)/512]*512)+(userSP-4)%512];
alias inodeIndex R4;
inodeIndex=1;
while(inodeIndex<MAX_FILE_NUM) do
	if([INODE_TABLE+16*inodeIndex+1]==fileName) then
		break;
	endif;
	inodeIndex=inodeIndex+1;
endwhile;
//If filename is invalid then return -1
if(inodeIndex==MAX_FILE_NUM || [INODE_TABLE+16*inodeIndex]!=EXEC) then
	alias retAdd R5;
	retAdd=([PTBR+2*(userSP-1)/512]*512)+(userSP-1)%512;
	[retAdd]=-1;
	[PROCESS_TABLE+pid*16+9]=0;
	SP=userSP;
	ireturn;
endif;
//Calling exit process() function in process manager module
multipush(R1,R2,R3,R4);
R1=3;
R2=[SYSTEM_STATUS_TABLE+1];
call MOD_1;
multipop(R1,R2,R3,R4);
alias userAreaPageNo R5;
userAreaPageNo=[PROCESS_TABLE+pid*16+11];
[MEMORY_FREE_LIST+userAreaPageNo]=[MEMORY_FREE_LIST+userAreaPageNo]+1;
[SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1;
SP=userAreaPageNo*512-1;
alias perprocesstable R6;
perprocesstable=496;
while(perprocesstable<512) do
	[userAreaPageNo*512+perprocesstable]=-1;
	perprocesstable=perprocesstable+2;
endwhile;
[PROCESS_TABLE+pid*16+4]=RUNNING;
[PROCESS_TABLE+pid*16+7]=inodeIndex;
alias ptbase R6;
ptbase=PAGE_TABLE_BASE+pid*20;
//Setting page table entry for new process with same pid
[ptbase+0]=63;
[ptbase+1]="0100";
[ptbase+2]=64;
[ptbase+3]="0100";
multipush(R1,R2,R3,R4,R5,R6);
//Allocating stack pages
//stack page1
multipush(R6);//to reduce the no of instructions in each multipush & multipop
R1=1;
call MOD_2;
multipop(R6);
[ptbase+16]=R0;
[ptbase+17]="0110";
//stack page2
multipush(R6);
R1=1;
call MOD_2;
multipop(R6);
[ptbase+18]=R0;
[ptbase+19]="0110";
//Invalidating heap page1
[ptbase+5]="0000";
//Invalidating heap page2
[ptbase+7]="0000";
multipop(R1,R2,R3,R4,R5,R6);


//Code Page
if([INODE_TABLE+(inodeIndex*16)+8]!=-1) then
	multipush(R1,R2,R3,R4,R5,R6);
        R1=5;
	R2=[INODE_TABLE+(inodeIndex*16)+8];
        call MOD_2;
        multipop(R1,R2,R3,R4,R5,R6);
        [PAGE_TABLE_BASE+(pid*20)+8]=R0;
        [PAGE_TABLE_BASE+(pid*20)+9]="0100";
endif;
alias cntr R7;
cntr=10;
while(cntr<16) do
	[PAGE_TABLE_BASE+(pid*20)+cntr]=-1;
	[PAGE_TABLE_BASE+(pid*20)+cntr+1]="0000";
	cntr=cntr+2;
endwhile;
cntr=0;
while(cntr<10) do
	[DISK_MAP_TABLE+(pid*10)+cntr]=-1;
	cntr=cntr+1;
endwhile;
if([INODE_TABLE+(inodeIndex*16)+8]!=-1) then
	[DISK_MAP_TABLE+(pid*10)+4]=[INODE_TABLE+(inodeIndex*16)+8];
endif;
if([INODE_TABLE+(inodeIndex*16)+9]!=-1) then
	[DISK_MAP_TABLE+(pid*10)+5]=[INODE_TABLE+(inodeIndex*16)+9];
endif;
if([INODE_TABLE+(inodeIndex*16)+10]!=-1) then
	[DISK_MAP_TABLE+(pid*10)+6]=[INODE_TABLE+(inodeIndex*16)+10];
endif;
if([INODE_TABLE+(inodeIndex*16)+11]!=-1) then
	[DISK_MAP_TABLE+(pid*10)+7]=[INODE_TABLE+(inodeIndex*16)+11];
endif;

[([PAGE_TABLE_BASE+(pid*20)+16])*512] = [([PAGE_TABLE_BASE+(pid*20)+8]) * 512 + 1];
SP=8*512;
[PROCESS_TABLE+(pid*16)+9]=0;
ireturn;


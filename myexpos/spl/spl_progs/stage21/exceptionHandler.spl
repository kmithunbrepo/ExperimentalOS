[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+13]=SP;
[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+9]=-1;
SP=([PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+11]*512)-1;
backup;
multipush(EIP);
alias userSP R1;
userSP=[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+13];
alias pid R2;
pid=[SYSTEM_STATUS_TABLE+1];
if(EC!=0 || userSP>=((PTLR*512)-1)) then
	print "Not a ";
	print "page fault ";
	print "Exception ";
	//Calling Exit Process Funtion in process Manger module
	R1=3;
	R2=[SYSTEM_STATUS_TABLE+1];	
	call MOD_1;
	call MOD_5;
endif;
alias exPageNum R3;
exPageNum=EPN;
if((exPageNum==4 || exPageNum==5) || (exPageNum==6 || exPageNum==7)) then
	alias blockNum R4;
	blockNum=[DISK_MAP_TABLE+(pid*10)+exPageNum];
	//calling get code page from memory manager module
	multipush(R1,R2,R3,R4);
	R1=5;
	R3=pid;
	R2=blockNum;
	call MOD_2;
	multipop(R1,R2,R3,R4);
	[PTBR+2*exPageNum]=R0;	
	[PTBR+2*exPageNum+1]="1100";	
else
	if(exPageNum==2 || exPageNum==3) then
		//calling get free page for heap pages from mem manager module
		multipush(R1,R2,R3);
		R1=1;
		call MOD_2;
		multipop(R1,R2,R3);
		[PTBR+4]=R0;
		[PTBR+5]="1110";
		multipush(R1,R2,R3);
		R1=1;
		call MOD_2;
		multipop(R1,R2,R3);
		[PTBR+6]=R0;
		[PTBR+7]="1110";
	endif;
endif;
[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+9]=0;
multipop(EIP);
restore;
SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
SP=SP+1;
[([PTBR+2*(SP/512)]*512)+(SP%512)]=EIP;
ireturn;


